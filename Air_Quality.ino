
//libraries
#include <Wire.h>
#include <Adafruit_SCD30.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

Adafruit_SCD30  scd30;

#define SCREEN_WIDTH 128 
#define SCREEN_HEIGHT 32 

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

static const unsigned char PROGMEM logospash[] =
{0x07, 0xe4, 0x3f, 0x0f, 0xc0, 0x3f, 0x00, 0x3e, 0x47, 0xff, 0xe0, 0xf9, 0x00, 0x01, 0x80, 0x00, 
0x1c, 0x1c, 0x0c, 0x03, 0x00, 0xe1, 0xc0, 0x61, 0xc6, 0x18, 0x61, 0x87, 0x00, 0x03, 0x80, 0x00, 
0x38, 0x0c, 0x0c, 0x03, 0x01, 0xc0, 0xe0, 0xc0, 0xc4, 0x18, 0x23, 0x03, 0x00, 0x06, 0x80, 0x03, 
0x30, 0x0c, 0x0c, 0x03, 0x03, 0x80, 0x70, 0xc0, 0xc4, 0x18, 0x23, 0x03, 0x00, 0x05, 0x80, 0x05, 
0x70, 0x04, 0x0c, 0x03, 0x03, 0x80, 0x70, 0xc0, 0x40, 0x18, 0x03, 0x01, 0x00, 0x09, 0x80, 0x0d, 
0x60, 0x00, 0x0c, 0x03, 0x07, 0x00, 0x38, 0xe0, 0x40, 0x18, 0x03, 0x81, 0x00, 0x1a, 0x80, 0x0a, 
0xe0, 0x00, 0x0c, 0x03, 0x07, 0x00, 0x38, 0x78, 0x00, 0x18, 0x01, 0xe0, 0x00, 0x3d, 0x80, 0x12, 
0xe0, 0x00, 0x0c, 0x03, 0x07, 0x00, 0x38, 0x3e, 0x00, 0x18, 0x00, 0xf8, 0x00, 0x71, 0x00, 0x27, 
0xe0, 0x1f, 0x8f, 0xff, 0x07, 0x00, 0x38, 0x1f, 0x00, 0x18, 0x00, 0x7c, 0x00, 0x62, 0x00, 0x6b, 
0xe0, 0x06, 0x0c, 0x03, 0x07, 0x00, 0x38, 0x07, 0xc0, 0x18, 0x00, 0x1f, 0x00, 0xb6, 0x00, 0xf2, 
0xe0, 0x06, 0x0c, 0x03, 0x07, 0x00, 0x38, 0x01, 0xc0, 0x18, 0x00, 0x07, 0x01, 0xfe, 0x00, 0xe4, 
0xf0, 0x06, 0x0c, 0x03, 0x07, 0x00, 0x30, 0x80, 0xe0, 0x18, 0x02, 0x03, 0x86, 0x01, 0x81, 0xcc, 
0x70, 0x06, 0x0c, 0x03, 0x03, 0x80, 0x70, 0x80, 0x60, 0x18, 0x02, 0x01, 0x8c, 0x00, 0xc2, 0x78, 
0x78, 0x06, 0x0c, 0x03, 0x03, 0x80, 0x60, 0xc0, 0x60, 0x18, 0x03, 0x01, 0x88, 0x00, 0x64, 0xe8, 
0x3c, 0x06, 0x0c, 0x03, 0x01, 0xc0, 0xe0, 0xc0, 0x40, 0x18, 0x03, 0x01, 0x10, 0x00, 0x2c, 0x88, 
0x0e, 0x06, 0x0c, 0x03, 0x00, 0xe1, 0xc0, 0xf0, 0xc0, 0x18, 0x03, 0xc3, 0x14, 0x18, 0x32, 0x10, 
0x03, 0xf8, 0x3f, 0x0f, 0xc0, 0x3f, 0x00, 0x9f, 0x00, 0x7e, 0x02, 0x7c, 0x24, 0x18, 0x32, 0xf0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x18, 0x21, 0xb0, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x2e, 0x18, 0x28, 0x60, 
0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2e, 0x18, 0x2c, 0x40, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa6, 0x18, 0x03, 0x80, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa6, 0x18, 0x03, 0x00, 
0xf9, 0xdf, 0xff, 0x8f, 0xff, 0x9e, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xb6, 0x08, 0x06, 0x00, 
0xf9, 0xff, 0xff, 0xaf, 0xff, 0xdf, 0xf7, 0xff, 0xdf, 0xff, 0xff, 0xff, 0x90, 0x00, 0x0c, 0x00, 
0xf5, 0x98, 0x7f, 0x69, 0x73, 0xdc, 0xe2, 0x5f, 0xe7, 0x10, 0xe3, 0x10, 0x90, 0x00, 0x0c, 0x00, 
0xf1, 0xdd, 0x7f, 0x6d, 0x7b, 0xbe, 0xee, 0xdf, 0xf6, 0x1a, 0xee, 0xda, 0x90, 0x00, 0x04, 0x00, 
0xed, 0xbb, 0xff, 0x5a, 0xc7, 0xbd, 0xef, 0x3f, 0xb6, 0xf5, 0xf2, 0xd7, 0x90, 0x00, 0x02, 0x00, 
0xcc, 0x01, 0xff, 0xb8, 0x52, 0x00, 0x63, 0x7f, 0x8e, 0x04, 0xc6, 0x23, 0x90, 0x00, 0x02, 0x00, 
0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x90, 0x00, 0xf2, 0x00, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x90, 0x38, 0x8c, 0x00, 
0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1b, 0x27, 0x00, 0x00, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0e, 0xc2, 0x00, 0x00};

void setup() {
  Serial.begin(115200);

  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { 
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }

  display.clearDisplay();
  display.drawBitmap(0, 0, logospash, 128, 32, 1);
  display.setTextSize(1); 
  display.setTextColor(WHITE); 
  display.setCursor(0, 0);
  display.display();
  delay(5000); 

  if (!scd30.begin()) {
    Serial.println("Failed to find SCD30 chip");
    while (1) { delay(10); }
  }
}

void loop() {
  if (scd30.dataReady()){
  Serial.println("Data available!");

  if (!scd30.read()){
  Serial.println("Error reading sensor data"); return; } 

  Serial.print("Temp: ");                                            
  Serial.println(scd30.temperature);
  Serial.print("Humidity: ");
  Serial.println(scd30.relative_humidity);
  Serial.print("CO2: ");
  Serial.println(scd30.CO2, 2);

  display.clearDisplay();
  display.setTextSize(1);

  display.setCursor(0,0);
  display.println("Temperature: ");
  display.setCursor(75,0);
  display.print(scd30.temperature);
  display.println(" C");

  display.setCursor(0,8);
  display.println("Humidity: ");
  display.setCursor(57,8);
  display.print(scd30.relative_humidity);
  display.println(" %");

  display.setCursor(0,16);
  display.println("Co2: ");
  display.setCursor(27,16);
  display.print(scd30.CO2, 2);
  display.println(" ppm");

  display.display();
  delay(2000);
  Serial.print("test");
  } else {
    //Serial.println("No data");
  }
}
